//Write a menu driven program in C++ to create an array of N integers sorted in
//ascending order and to search for a given value in the array using Binary
//Search algorithm

#include<iostream>
using namespace std;
class binary {
	int a[20],n;
	public:
		void input();
		void search();
};

void binary::input() {
	cout<<"Enter the size of the array: ";
	cin>>n;
	cout<<"\nEnter the elements of the array in ascending order: ";
	for(int i=0;i<n;i++) {
		cin>>a[i];
	}
}

void binary::search() {
	int x, l=0, h=n-1, m, k=0;  
	cout<<"\nEnter the element to be searched: ";
	cin>>x; 
	while(l<=h) { 
		m=(l+h)/2; 
		if(x==a[m]) { 
			k=1;
			cout<<"\nThe element found at position "<<m+1;
			break;
		}
		else if(x<a[m]) {
			h=m-1; 
		}
		else {
			l=m+1;
		}
	}
	
	if(k==0) {
		cout<<"\nElement not found.";
	}
}

int main() {
	int c;
	binary b;
	do {
		cout<<"\nEnter your choice:\n1-Input\n2-Search\n3-Exit\n";
		cin>>c;
		switch(c) {
			case 1: b.input();
			break;
			case 2: b.search();
			break;
			case 3: break;
			default: break;
		}
	} while(c!=3);
}


//Write a menu driven program in C++ to create an array of N numbers and to sort
//the array in ascending order using Bubble sort technique. Output the array
//before and after sorting.

#include<iostream>
using namespace std;
class Bubble {
	int a[10], n;
	public:
		void input();
		void sort();
};

void Bubble::input() {
	cout<<"Enter the size of the array: ";
	cin>>n;
	cout<<"\nEnter the elements of the array: ";
	for(int i=0;i<n;i++) {
		cin>>a[i];
	}
}

void Bubble::sort() {
	for(int j=1;j<=n-1;j++) {
		for(int i=0;i<=n-j-1;i++) {
			if(a[i]>a[i+1]) {
				int t=a[i];
				a[i]=a[i+1];
				a[i+1]=t;
			}
			cout<<"After iteration"<<j<<"\n";
	for(int i=0;i<=n-1;i++) {
		cout<<a[i]<<"\t";
	}
	cout<<"\n";
		}
	}
}

int main() {
	int c;
	Bubble b;
	do {
		cout<<"\nEnter your choice:\n1-Input\n2-Sort\n3-Exit\n";
		cin>>c;
		switch(c) {
			case 1: b.input();
			break;
			case 2: b.sort();
			break;
			case 3: break;
			default: break;
		}
	} while(c!=3);
}


//Write a menu driven program in C++ to create an array of N numbers and to sort
//the array in ascending order using Selection sort technique. Output the array
//before and after sorting.

#include<iostream>
using namespace std;
class Selection {
	int a[10], n;
	public:
		void input();
		void sort();
};

void Selection::input() {
	cout<<"Enter the size of the array: ";
	cin>>n;
	cout<<"\nEnter the elements of the array: ";
	for(int i=0;i<n;i++) {  
		cin>>a[i];
	}
}

void Selection::sort() {
	for(int j=0;j<=n-1;j++) {  
		int small=a[j];  
		int pos=j; 
		for(int i=j+1;i<=n-1;i++) { 
			if(small>a[i]) {
				small=a[i]; 
				pos=i; 
			}
		}
				int t=a[j];
				a[j]=a[pos];
				a[pos]=t;
			cout<<"After iteration "<<j<<"\n";
			for(int i=0;i<=n-1;i++) {
		cout<<a[i]<<"\t";
	}
	cout<<"\n";
		}
}

int main() {
	int c;
	Selection b;
	do {
		cout<<"\nEnter your choice:\n1-Input\n2-Sort\n3-Exit\n";
		cin>>c;
		switch(c) {
			case 1: b.input();
			break;
			case 2: b.sort();
			break;
			case 3: break;
			default: break;
		}
	} while(c!=3);
}


//Write a menu driven program in C++ to create an array of N numbers and to sort
//the array in ascending order using Insertion sort technique. Output the array
//before and after sorting.

#include<iostream>
using namespace std;

class Insertion {
	int a[20],n;
	public: void input();
		    void sort();
};

void Insertion::input() {
	cout<<"Enter the size of the array: ";
	cin>>n;
	cout<<"\nEnter the elements of the array: ";
	for(int i=0;i<n;i++) {  
		cin>>a[i];
	}
}

void Insertion::sort() {
	int x,j;
	for(int i=1;i<n;i++) {
		x=a[i];
		j=i-1;
		while(x<a[j]&&j>=0) {
			a[j+1]=a[j];
			j--;
			a[j+1]=x;
		}
		cout<<"After iteration "<<i<<"\n";
		for(int k=0;k<n;k++) {
			cout<<a[k]<<" ";
		}
		cout<<"\n";
	}
}

int main() {
	int c;
	Insertion b;
	do {
		cout<<"\nEnter your choice:\n1-Input\n2-Sort\n3-Exit\n";
		cin>>c;
		switch(c) {
			case 1: b.input();
			break;
			case 2: b.sort();
			break;
			case 3: break;
			default: break;
		}
	} while(c!=3);
}

//Write a C++ program to input two arrays A and B , both sorted in ascending order.
//Merge A and B to obtain a third array C such that C is also in ascending order.
//Output all three arrays A, B and C
#include<iostream>
using namespace std;

class merge
{
	int m,n,a[100],b[100],c[200];
	public:
			void input();
			void merge_all();
			void output();
};

void merge::input()
{
	int i;
	cout<<"Enter the number of elements of both arrays respectively: ";
	cin>>m>>n;
	cout<<"Enter the elements of the first array in ascending order:\n";
	for(i = 0; i < m; i++)
	{
		cin>>a[i];
	}
	cout<<"Enter the elements of the second array in ascending order:\n";
	for(i = 0; i < n; i++)
	{
		cin>>b[i];
	}
}

void merge::merge_all()
{
	int i = 0, p = 0, q = 0;
	while(p<m && q <n)
	{
		if(a[p] < b[q])
		{
			c[i] = a[p];
			i++;
			p++;
		}
		else
		{
			c[i] = b[q];
			i++;
			q++;
		}
	}
	if(p >= m)
	{
		while(i < m + n)
		{
			c[i] = b[q];
			i++;
			q++;
		}
	}
	if(q >= n)
	{
		while(i < m + n)
		{
			c[i] = a[p];
			i++;
			p++;
		}
	}
}

void merge::output()
{
	int i;
	cout<<"The elements of the first array are:\n";
	for(i = 0; i < m; i++)
	{
		cout<<a[i]<<"\t";
	}
	cout<<"\n";
	cout<<"The elements of the second array are:\n";
	for(i = 0; i < n; i++)
	{
		cout<<b[i]<<"\t";
	}
	cout<<"\n";
	cout<<"The merged array is:\n";
	for(i = 0; i < m + n; i++)
	{
		cout<<c[i]<<"\t";
	}
	cout<<"\n";
}

int main()
{
	merge w;
	
	w.input();
	w.merge_all();
	w.output();
	
	return 0;
}


//Write a C++ program to input two matrices having integer elements
//M1 of order (m x n) and M2 of order (n x p) and obtain the product matrix P
//Output all three matrices M1, M2 and P
#include<iostream>
using namespace std;

class product
{
	int m,n,e,p,M1[100][100],M2[100][100],P[100][100];
	public:
			void input();
			void prod();
			void output();
};

void product::input()
{
	int i, j, k = 0;
	cout<<"Enter the size of the first matrix: ";
	cin>>m>>n;
	cout<<"Enter the size of the second matrix: ";
	cin>>e>>p;
	if(n != e)
	{
		cout<<"Matrices cannot be multiplied";
	}
	else
	{
		k = 1;
		cout<<"Enter the elements of the first array:\n";
		for(i = 0; i < m; i++)
		{
			for(j = 0; j < n; j++)
			{
				cin>>M1[i][j];
			}
		}
		cout<<"Enter the elements of the second array:\n";
		for(i = 0; i < e; i++)
		{
			for(j = 0; j < p; j++)
			{
				cin>>M2[i][j];
			}
		}
	}
}

void product::prod()
{
	int i, j, k, sum = 0;
	for(k = 0; k < m; k++)   //k=0 
	{
		for(i = 0; i < p; i++) //i=1
		{
			for(j = 0; j < n; j++) //j=2
			{
				sum += M1[k][j] * M2[j][i];   //sum=0+1*2+2*4+3*6=28
			}
			P[k][i] = sum; //P[0][0]=22
			sum = 0;
		}
	}
}

void product::output()
{
	int i, j;
	cout<<"The elements of the first matrix are:\n";
	for(i = 0; i < m; i++)
	{
		for(j = 0; j < n; j++)
		{
			cout<<M1[i][j]<<"\t";
		}
		cout<<"\n";
	}
	cout<<"\n";
	cout<<"The elements of the second matrix are:\n";
	for(i = 0; i < e; i++)
	{
		for(j = 0; j < p; j++)
		{
			cout<<M2[i][j]<<"\t";
		}
		cout<<"\n";
	}
	cout<<"\n";
	cout<<"The product matrix is:\n";
	for(i = 0; i < m; i++)
	{
		for(j = 0; j < p; j++)
		{
			cout<<P[i][j]<<"\t";
		}
		cout<<"\n";
	}
	cout<<"\n";
}

int main()
{
	product w;
	
	w.input();
	w.prod();
	w.output();
	
	return 0;
}


//Write a menu driven program in C++ to create and display a linked-list
//having N nodes, where the data parts consist of
//empcode -> integer
//empname -> of maximum length 20 characters
//basic_pay -> float
//allowance -> float
//The ouptput should be in a neat tabular form as shown below
//***************************************************************
//Sr No.	Emp Code	Emp Name	Basic Pay	Allowance	Total
//1			101			...			...			...			...
//***************************************************************

#include<iostream>
using namespace std;

class list
{
	struct node
	{
		int empcode;
		char empname[20];
		float basic_pay, allowance;
		node *link;
	} *start;
	int n;
	
	public:
			list();
			void input();
			void output(int);
};

list::list()
{
	start = NULL;
}

void list::input()
{
	node *temp, *ptr;
	temp = new node; //
	temp -> link = NULL;
	cout<<"\nEnter the\nEmp Code: ";
	cin>>temp -> empcode;
	cout<<"Emp Name: ";
	cin>>temp -> empname;
	cout<<"Basic Pay: ";
	cin>>temp -> basic_pay;
	cout<<"Allowance: ";
	cin>>temp -> allowance;
	
	if(start == NULL)
	{
		start = temp;
	}
	else
	{
		for(ptr = start; ptr -> link != NULL; ptr = ptr -> link)
		{
			ptr -> link = temp;
		}
	}
}

void list::output(int k)
{
	node *ptr;
	int i;
	for(ptr = start; ptr != NULL; ptr = ptr -> link)
	{
		cout<<k<<"\t"<<ptr -> empcode<<"\t\t"<<ptr -> empname<<"\t\t"<<ptr -> basic_pay<<"\t\t"<<ptr -> allowance<<"\t\t"<<ptr -> basic_pay + ptr -> allowance<<endl;
	}
}

int main()
{
	int c, i, k = 1, j = 0;
	list z[10];
	do
	{
		cout<<"\n1. Enter data\n2. Display\n3. Exit\n";
		cin>>c;
		
		switch(c)
		{
			case 1:
					z[j].input();
					j++;
					break;
			case 2:
					for(i = 0; i <= 100; i++)
					{
						cout<<"*";
					}
					cout<<"\nSr No."<<"\t"<<"Emp Code"<<"\t"<<"Emp Name"<<"\t"<<"Basic Pay"<<"\t"<<"Allowance"<<"\t"<<"Total\n";
							
					k = 1;			
					for(i = 0; i < sizeof(z)/sizeof(z[0]); i++)
					{
						z[i].output(k++);
					}
					for(i = 0; i <= 100; i++)
					{
						cout<<"*";
					}
					break;
			case 3: break;
			default:
					cout<<"\nIncorrect Choice. Please re-enter\n";
					break;
		}
	}while(c != 3);
	
	return 0;
}


//Write a menu driven program in C++ to push and pop
//values from a linked stack storing floating point numbers.
//Display the contents of the stack after each operation.
#include <iostream>
using namespace std;

class stack
{

	struct node
	{
		float data;
		node *link;
	}; node *top;
	
	public : stack()
	{
		top = NULL;
	}
	void push();
	void pop();
	void display();
};

void stack::push()
{
	node *temp;
	temp = new node;
	
	cout<<"Enter the data: ";
	cin>> temp -> data;
	if(top == NULL)
	{
		temp -> link = NULL;
	}
	else
	{
		temp -> link = top;
	}	
	top = temp;
	display();
}

void stack::pop()
{
	if(top == NULL)
	{
		cout<<"\nThe stack is empty.\n"
	}
	else
	{
		node *temp;
		temp = top;
		top = top -> link;
		cout<<"\nThe deleted element is "<<temp -> data<<"\n";
		delete temp;	
	}
	display();
}

void stack::display()
{
	if(top == NULL)
	{
		cout<<"\nThe stack is empty";
	}
	else
	{
		node *temp;
		for(temp = top; temp != NULL; temp = temp -> link)
		{
			cout<< temp -> data<<"\n";
		}	
	}
	
}

int main()
{
	int choice;
	stack s;
	
	do
	{
		cout<<"\nEnter your choice:\n1. Push an element onto the stack\n2. Pop an element from the stack\n3. Display the stack\n4. Exit\n";
		cin>>choice;
		switch(choice)
		{
			case 1:
					s.insert();
					break;
			case 2:
					s.del();
					break;
			case 3:
					s.display();
					break;
			case 4:
					break;
			default:
					cout<<"\nIncorrect Choice. Please re-enter\n";
					break;
		}
	}while(choice != 4);
}


//Write a menu driven program in C++ to add and remove
//values from a linked queue storing floating point numbers.
//Display the contents of the queue after each operation.
#include <iostream>
using namespace std;

class queue
{

	struct node
	{
		float data;
		node *link;
	}; node *front, *rear;
	
	public : queue()
	{
		front = rear = NULL;
	}
	void insert();
	void del();
	void display();
};

void queue::insert()
{
	node *temp;
	temp = new node;
	
	cout<<"Enter the data: ";
	cin>> temp -> data;
	temp -> link = NULL;
	
	if(front == NULL)
	{
		front = rear = temp;
	}
	else
	{
		rear -> link = temp; 
		rear = temp;
	}
	display();
}

void queue::del()
{
	if(front != NULL)
	{
		node *temp;
		temp = front;
		front = front -> link;
		cout<<"\nThe deleted element is "<<temp -> data<<"\n";
		delete temp;	
	}
	display();
}

void queue::display()
{
	if(front == NULL)
	{
		cout<<"\nThe queue is empty";
	}
	else
	{
		node *temp;
		for(temp = front; temp != NULL; temp = temp -> link)
		{
			cout<< temp -> data<<"\t";
		}	
	}
	
}

int main()
{
	int choice;
	queue q;
	
	do
	{
		cout<<"\nEnter your choice:\n1. Insert an element into the queue\n2. Delete an element from the queue\n3. Display the queue\n4. Exit\n";
		cin>>choice;
		switch(choice)
		{
			case 1:
					q.insert();
					break;
			case 2:
					q.del();
					break;
			case 3:
					q.display();
					break;
			case 4:
					break;
			default:
					cout<<"\nIncorrect Choice. Please re-enter\n";
					break;
		}
	}while(choice != 4);
}


//Define class student having the folowing specifications
//private data members
//rollno -> integer
//name -> of maximum length 35 characters
//marks -> an array of size 6 storig marks in 6 subjects
//public member functions
//input() -> to read data values
//show() -> to compute the overall percentage of each student and display all data values
//Write a C++ program to create and display a binary file having objects of type student.

#include<iostream>
#include<iomanip>
#include<fstream>
using namespace std;

class student
{
	int rollno;
	char name[35];
	float marks[6];
	public:
			void input();
			void show();
};

void student::input()
{
	cout<<"\nEnter\nRoll No: ";
	cin>>rollno;
	cout<<"Name: ";
	cin>>name;
	cout<<"\nEnter the marks: ";
	for(int i = 0; i < 6; i++)
	{
		cin>>marks[i];	
	}
}

void student::show()
{
	float tot = 0, per;
	for(int i = 0; i < 6; i++)
	{
		tot += marks[i];
	}
	per = tot / 6.0;
	cout<<rollno<<"\t\t"<<name<<"\t\t"<<tot<<"\t\t"<<per<<endl;
	for(int i = 0; i < 6; i++)
	{
		cout<<marks[i]<<"\t";
	}
	cout<<"\n";
}

int main()
{
	int i,n;
	student z[10];
	fstream a;
	cout<<"Enter the number of students: ";
	cin>>n;
	a.open("student.dat",ios::out|ios::binary);
	for(i = 0; i < n; i ++)
	{
		z[i].input();
		a.write((char *) &z[i],sizeof(z[i]));
	}
	a.close();
	cout<<"Roll No\t\tName\tTotal Marks\tPercentage"<<endl;
	for(i = 0; i < n; i++)
	{
		a.open("student.dat",ios::in);
		a.read((char *) &z[i],sizeof(z[i]));
		z[i].show();
	}
	a.close();
	
	return 0;
}